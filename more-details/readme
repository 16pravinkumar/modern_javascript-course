shortcuts for if-statements (ternary,guard and default) 

In JavaScript, there are several shortcuts for writing conditional statements using if-statements, including ternary operators, guard clauses, and default values. Here are examples of each:

1. **Ternary Operator**:
   The ternary operator is a concise way to express a simple if-else statement. It has the form: `condition ? expressionIfTrue : expressionIfFalse`. It's useful when you want to assign a value or perform a simple action based on a condition.

   Example:

   ```javascript
   // If-else statement
   if (x > 10) {
     result = "x is greater than 10";
   } else {
     result = "x is not greater than 10";
   }

   // Ternary operator equivalent
   result = x > 10 ? "x is greater than 10" : "x is not greater than 10";
   ```

2. **Guard Clauses**:
   Guard clauses are used to handle exceptional cases or edge conditions at the beginning of a function. They are particularly useful for early return from a function to avoid deeply nested if-else structures.

   Example:

   ```javascript
   // Traditional if-else structure
   function divide(a, b) {
     if (b === 0) {
       return "Division by zero is not allowed";
     } else {
       return a / b;
     }
   }

   // Guard clause
   function divide(a, b) {
     if (b === 0) {
       return "Division by zero is not allowed";
     }
     return a / b;
   }
   ```

3. **Default Values**:
   Default values can be assigned to variables or function parameters using the logical OR (`||`) operator. If the value is falsy, the default value is used.

   Example:

   ```javascript
   // Traditional default value assignment
   let name = someName || "Stranger";

   // ES6 default parameter
   function greet(name = "Stranger") {
     return "Hello, " + name + "!";
   }
   ```

These shortcuts can make your code more concise and readable, especially for simple conditional logic. However, it's important to use them judiciously, as overusing shortcuts can lead to reduced code readability in more complex scenarios.





********************************************************************************************

more information about objects 
eg 
let product = {
  name : "Pravin",
  'delivery-time' : '1 day',
   ['age'] : 20
}

console.log(product.name) ==> o/p ==> "Pravin"
console.log(product.age) ==> o/p ==> undefined
console.log(product.delivery-date) ==> o/p ==> error becasue it things tha date is some other value it simple term it just things that we are dowing seperation between delivery and date to solve this proble we use below method i.e box notation
console.log(product.['delivery-date']) ==> o/p ==> undefined



| Feature                   | Bracket Notation                                                                                                            | Dot Notation                       |
|---------------------------|---------------------------------|-------------------------------------------------------------------------------------------|
| **Key Syntax**            | Uses strings or variables enclosed in square brackets: `object['key']`                                                      | Uses the literal key as a string without quotes: `object.key`                         |
| **Key Evaluation**        | Can dynamically evaluate keys using expressions: `object[variable]`                                                         | Requires a fixed, literal key: `object.variable`                                     |
| **Usage**                 | Useful when key is dynamic or not a valid identifier, e.g., `object['property-name']`                                       | Suitable for static keys that are valid identifiers, e.g., `object.propertyName`       |
| **Example**               | ```javascript const person = { name: 'John', age: 30 }; const key = 'name'; console.log(person[key]); // Output: 'John' ``` | ```javascript const person = { name: 'John', age: 30 }; console.log(person.name); // Output: 'John' ```  |

In summary, bracket notation allows for dynamic key evaluation using expressions and is suitable when dealing with keys that are not valid identifiers. Dot notation, on the other hand, is more concise and suitable for static keys that are valid identifiers.




***********************************************************************************************************************************************
what is the difference between Json and js object;
| Feature                        | JSON (JavaScript Object Notation)                                                 | JavaScript Objects                                   |
|--------------------------------|---------------------------------------------------------------------------------- |------------------------------------------------------|
| **Syntax**                     | String-based data interchange format with a specific syntax.                      | Part of the JavaScript language, follows JavaScript syntax. |
| **Data Types**                 | Limited to basic data types: strings, numbers, booleans, objects, arrays, null.   | Supports a wider range of data types, including functions and special objects. |
| **Property Names**             | Must be enclosed in double quotes.                                                | Can be specified without quotes, but quotes are required if the property name contains special characters or spaces. |
| **Methods**                    | No methods or functions can be defined in JSON.                                   | Methods and functions can be defined as properties of JavaScript objects. |
| **Usage**                      | Primarily used for data interchange between different languages and systems.      | Used for organizing data within a JavaScript program. |
| **Example**                    | ```json {"name": "John", "age": 30} ```                                           | ```javascript const person = { name: 'John', age: 30 }; ``` |

In summary, JSON is a data interchange format that is language-agnostic and primarily used for data exchange between systems, while JavaScript objects are native to the JavaScript language and are used for organizing and manipulating data within JavaScript programs.



*****************************************************************************************************************************
question list Built-in JSON Object
1] how to convert normal js object into JSON Object
const person = {
        name: "John",
        age: 30,
        isStudent: false,
        add: function (a, b) {
          return a + b;
        },
        subtract: function (a, b) {
          return a - b;
        },
      };

      console.log(person.add(5, 3)); // Output: 8
      console.log(person.subtract(8, 3)); // Output: 5

      let jsonFormat = JSON.stringify(person);
      console.log(jsonFormat); // in this add nad sub will not added in JSON because they both are function


2] how to convert  JSON into JS Objects
const person = {
        name: "John",
        age: 30,
        isStudent: false,
        add: function (a, b) {
          return a + b;
        },
        subtract: function (a, b) {
          return a - b;
        },
      };

      console.log(person.add(5, 3)); // Output: 8
      console.log(person.subtract(8, 3)); // Output: 5

      let jsonFormat = JSON.stringify(person);
      let jsonParse = JSON.parse(jsonFormat)
      console.log(jsonFormat); // in this add nad sub will not added in JSON because they both are function
      console.log(jsonParse); // it will convert jsonFormat varaiable into normal objects



*****************************************************************************************************************************

Built-in Object 
localstorage ==> used to save data permanently in local device 

locak
localStorage.setItem('Message',"Praivn")  // always takes values as string 
console.log(localStorage.getItem('Message'));


*****************************************************************************************************************************
what is auto boxing in js ?
In JavaScript, auto boxing refers to the automatic conversion of primitive data types to their corresponding object wrappers when a method or property is accessed on the primitive value. 

For example, JavaScript has primitive data types such as numbers, strings, and booleans. These primitive types are not objects and do not have properties or methods associated with them. However, when you try to access a property or method on a primitive value, JavaScript automatically converts the primitive value to its corresponding object wrapper, allowing you to use properties and methods.

Here's an example with the string primitive:

```javascript
var primitiveString = "Hello, World!";
var result = primitiveString.length; // Accessing the 'length' property

console.log(result); // Outputs the length of the string
```

In this example, `primitiveString` is a primitive string, but when we access its `length` property, JavaScript auto boxes it by temporarily converting it to a `String` object, allowing us to access the `length` property.

Auto boxing can happen for other primitive types as well, such as numbers and booleans. For numbers, the primitive value is temporarily converted to a `Number` object, and for booleans, it is converted to a `Boolean` object.

While auto boxing can be convenient, it's important to be aware of it, as it may have some performance implications. In many cases, explicitly creating object wrappers may be more efficient if you need to use object properties and methods frequently.

*********************************************************************************************************************************************************

In your code, `obj1` and `obj2` both reference the same object in memory. When you do `const obj2 = obj1;`, you are not creating a new object; instead, you're creating a new reference to the same object. Therefore, when you modify the object through either `obj1` or `obj2`, the changes will be reflected in both variables since they point to the same underlying object.

In your example:

```javascript
const obj1 = {
    message: "Pravin"
};

const obj2 = obj1;  // obj2 now references the same object as obj1

obj2.message = "Kumar";

console.log(obj1);  // Both obj1 and obj2 will now show { message: "Kumar" }
console.log(obj2);
```

After you change the `message` property of `obj2`, both `obj1` and `obj2` will reflect that change because they refer to the same object in memory.

If you want to create a new object with the same properties as `obj1` without sharing the reference, you can use methods like `Object.assign` or the spread operator (`...`):

```javascript
const obj1 = {
    message: "Pravin"
};

// Using Object.assign
const obj2 = Object.assign({}, obj1);

// Using the spread operator
// const obj2 = { ...obj1 };

obj2.message = "Kumar";

console.log(obj1);  // obj1 remains unchanged
console.log(obj2);  // obj2 has the modified message property
```

Now, `obj1` and `obj2` are separate objects, and modifying one won't affect the other.


*****************************************************************************************************************************************************
we cannot directly compare two different objects
const obj1 = {
    message: "Pravin",
};

const obj2 = obj1;

const obj3 = {
    message: "Pravin",
};

console.log(obj1 === obj2); // true, because obj2 references the same object as obj1
console.log(obj1 === obj3); // false, because obj3 have its own reference and obj1 has its own refrence 

**************************************************************************************************************************************************************
   //some shortcuts for objects


      const obj = {
        message: "Hello there!",
        price: 200,
      };
      //  1} property destructuring
      let { message, price } = obj;
      console.log(message); // Hello there!

      // 2} shorthand notation
      let { message: msg, price: prc } = obj;
      console.log(msg); // Hello there!
       

      // 3} shortcuts for method
      let obj2 = {
        // message : message
         message,
        //  method : function  fun1(){
        //   return "Hello all"
        //  }

        // shortcut for above method
        method(){
          return 'Hello all'
        }

      };
      console.log(message);
      console.log(obj2.method());

      


